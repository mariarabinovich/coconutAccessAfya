// Generated by CoffeeScript 1.8.0
var Client,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Client = (function() {
  function Client(options) {
    this.hasBeenRegistered = __bind(this.hasBeenRegistered, this);
    this.allUniqueValues = __bind(this.allUniqueValues, this);
    this.mostRecentValue = __bind(this.mostRecentValue, this);
    this.fetchResults = __bind(this.fetchResults, this);
    this.resultsAsArray = __bind(this.resultsAsArray, this);
    this.sortResultArraysByCreatedAt = __bind(this.sortResultArraysByCreatedAt, this);
    this.clientResultsSortedMostRecentFirst = __bind(this.clientResultsSortedMostRecentFirst, this);
    this.firstName = __bind(this.firstName, this);
    this.name = __bind(this.name, this);
    this.toJSON = __bind(this.toJSON, this);
    this.clientID = options != null ? options.clientID : void 0;
    if (options != null ? options.results : void 0) {
      this.loadFromResultDocs(options.results);
    }
    this.availableQuestionTypes = [];
  }

  Client.prototype.loadFromResultDocs = function(resultDocs) {
    this.clientResults = resultDocs;
    _.each(resultDocs, (function(_this) {
      return function(resultDoc) {
        if (resultDoc.toJSON != null) {
          resultDoc = resultDoc.toJSON();
        }
        if (resultDoc.question) {
          if (_this.clientID == null) {
            _this.clientID = resultDoc.clientID;
          }
          _this.availableQuestionTypes.push(resultDoc.question);
          if (_this[resultDoc.question] == null) {
            _this[resultDoc.question] = [];
          }
          return _this[resultDoc.question].push(resultDoc);
        }
      };
    })(this));
    this.availableQuestionTypes = _(this.availableQuestionTypes).uniq();
    return this.sortResultArraysByCreatedAt();
  };

  Client.prototype.fetch = function(options) {
    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/resultsByClientID", {
      key: this.clientID,
      include_docs: true,
      success: (function(_this) {
        return function(result) {
          _this.loadFromResultDocs(_.pluck(result.rows, "doc"));
          return options != null ? options.success() : void 0;
        };
      })(this),
      error: (function(_this) {
        return function(error) {
          return options != null ? options.error(error) : void 0;
        };
      })(this)
    });
  };

  Client.prototype.toJSON = function() {
    var returnVal;
    returnVal = {};
    _.each(this.availableQuestionTypes, (function(_this) {
      return function(question) {
        return returnVal[question] = _this[question];
      };
    })(this));
    return returnVal;
  };

  Client.prototype.name = function() {
    return this["Client Registration"][0].Firstname + " " + this["Client Registration"][0].Lastname;
  };

  Client.prototype.firstName = function() {
    return this["Client Registration"][0].Firstname;
  };

  Client.prototype.clientResultsSortedMostRecentFirst = function() {
    return _(this.clientResults).sortBy(function(result) {
      return result.fDate || result.VisitDate || result.lastModifiedAt;
    }).reverse();
  };

  Client.prototype.sortResultArraysByCreatedAt = function() {
    return _.each(this.availableQuestionTypes, (function(_this) {
      return function(resultType) {
        return _this[resultType] = _.sortBy(_this[resultType], function(result) {
          return result.createdAt;
        });
      };
    })(this));
  };

  Client.prototype.flatten = function(availableQuestionTypes) {
    var returnVal;
    if (availableQuestionTypes == null) {
      availableQuestionTypes = this.availableQuestionTypes;
    }
    returnVal = {};
    _.each(availableQuestionTypes, (function(_this) {
      return function(question) {
        var type;
        type = question;
        return _.each(_this[question], function(value, field) {
          if (_.isObject(value)) {
            return _.each(value, function(arrayValue, arrayField) {
              return returnVal["" + question + "-" + field + ": " + arrayField] = arrayValue;
            });
          } else {
            return returnVal["" + question + ":" + field] = value;
          }
        });
      };
    })(this));
    return returnVal;
  };

  Client.prototype.LastModifiedAt = function() {
    return _.chain(this.toJSON()).map(function(question) {
      return question.lastModifiedAt;
    }).max(function(lastModifiedAt) {
      return lastModifiedAt != null ? lastModifiedAt.replace(/[- :]/g, "") : void 0;
    }).value();
  };

  Client.prototype.Questions = function() {
    return _.keys(this.toJSON()).join(", ");
  };

  Client.prototype.resultsAsArray = function() {
    return _.chain(this.possibleQuestions()).map((function(_this) {
      return function(question) {
        return _this[question];
      };
    })(this)).flatten().compact().value();
  };

  Client.prototype.fetchResults = function(options) {
    var count, results;
    results = _.map(this.resultsAsArray(), (function(_this) {
      return function(result) {
        var returnVal;
        returnVal = new Result();
        returnVal.id = result._id;
        return returnVal;
      };
    })(this));
    count = 0;
    _.each(results, function(result) {
      return result.fetch({
        success: function() {
          count += 1;
          if (count >= results.length) {
            return options.success(results);
          }
        }
      });
    });
    return results;
  };

  Client.prototype.mostRecentValue = function(resultType, question) {
    var result, returnVal, sortedValues, _i, _len;
    returnVal = null;
    if (this[resultType] != null) {
      sortedValues = _(this[resultType]).sortBy("lastModifiedAt").reverse();
      for (_i = 0, _len = sortedValues.length; _i < _len; _i++) {
        result = sortedValues[_i];
        returnVal = result[question];
        if ((returnVal != null) && returnVal !== "") {
          break;
        }
      }
    }
    return returnVal;
  };

  Client.prototype.allUniqueValues = function(resultType, question, postProcess) {
    if (postProcess == null) {
      postProcess = null;
    }
    if (this[resultType] != null) {
      return _.chain(this[resultType]).map(function(result) {
        if ((postProcess != null) && (result[question] != null)) {
          return postProcess(result[question]);
        } else {
          return result[question];
        }
      }).sort().unique().compact().value();
    }
  };

  Client.prototype.allQuestionsWithResult = function(resultType, questions, resultToMatch, postProcess) {
    if (postProcess == null) {
      postProcess = null;
    }
    if (this[resultType] != null) {
      return _.chain(this[resultType]).map(function(result) {
        return _.map(questions, function(question) {
          if (result[question] === resultToMatch) {
            if (postProcess != null) {
              return postProcess(question);
            } else {
              return question;
            }
          }
        });
      }).flatten().sort().unique().compact().value();
    }
  };

  Client.prototype.allQuestionsWithYesResult = function(resultType, questions, postProcess) {
    if (postProcess == null) {
      postProcess = null;
    }
    return this.allQuestionsWithResult(resultType, questions, "Yes", postProcess);
  };

  Client.prototype.allQuestionsMatchingNameWithResult = function(resultType, questionMatch, resultToMatch, postProcess) {
    var questions;
    if (postProcess == null) {
      postProcess = null;
    }
    questions = _.chain(this[resultType]).map(function(result) {
      return _.map(result, function(answer, question) {
        if (question.match(questionMatch) && answer === resultToMatch) {
          if (postProcess != null) {
            return postProcess(question);
          } else {
            return question;
          }
        }
      });
    }).flatten().sort().unique().compact().value();
    window.a = questions;
    return questions;
  };

  Client.prototype.allQuestionsMatchingNameWithYesResult = function(resultType, questionMatch, postProcess) {
    if (postProcess == null) {
      postProcess = null;
    }
    return this.allQuestionsMatchingNameWithResult(resultType, questionMatch, "Yes", postProcess);
  };

  Client.prototype.allAnswersMatchingQuestionNameForResult = function(result, questionMatch, postProcess) {
    if (postProcess == null) {
      postProcess = null;
    }
    return _.chain(result).map(function(answer, question) {
      if (question.match(questionMatch)) {
        return answer;
      }
    }).compact().value();
  };

  Client.prototype.mostRecentClinicalVisit = function() {
    if (this["Clinical Visit"] != null) {
      return _.max(this["Clinical Visit"], function(result) {
        return moment(result["createdAt"]).unix();
      });
    }
  };

  Client.prototype.hasBeenRegistered = function() {
    return this["Client Registration"] != null;
  };

  return Client;

})();

//# sourceMappingURL=Client.js.map
